// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: api/proto/message/v1/message.proto

package messagepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OCPPMessage_HeartbeatRequest_FullMethodName             = "/message.v1.OCPPMessage/HeartbeatRequest"
	OCPPMessage_HeartbeatConfirmation_FullMethodName        = "/message.v1.OCPPMessage/HeartbeatConfirmation"
	OCPPMessage_BootNotificationRequest_FullMethodName      = "/message.v1.OCPPMessage/BootNotificationRequest"
	OCPPMessage_BootNotificationConfirmation_FullMethodName = "/message.v1.OCPPMessage/BootNotificationConfirmation"
)

// OCPPMessageClient is the client API for OCPPMessage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OCPPMessageClient interface {
	// Sends a heartbeat
	HeartbeatRequest(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	HeartbeatConfirmation(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	BootNotificationRequest(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	BootNotificationConfirmation(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type oCPPMessageClient struct {
	cc grpc.ClientConnInterface
}

func NewOCPPMessageClient(cc grpc.ClientConnInterface) OCPPMessageClient {
	return &oCPPMessageClient{cc}
}

func (c *oCPPMessageClient) HeartbeatRequest(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, OCPPMessage_HeartbeatRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oCPPMessageClient) HeartbeatConfirmation(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, OCPPMessage_HeartbeatConfirmation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oCPPMessageClient) BootNotificationRequest(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, OCPPMessage_BootNotificationRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oCPPMessageClient) BootNotificationConfirmation(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, OCPPMessage_BootNotificationConfirmation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OCPPMessageServer is the server API for OCPPMessage service.
// All implementations must embed UnimplementedOCPPMessageServer
// for forward compatibility.
type OCPPMessageServer interface {
	// Sends a heartbeat
	HeartbeatRequest(context.Context, *Request) (*Response, error)
	HeartbeatConfirmation(context.Context, *Request) (*Response, error)
	BootNotificationRequest(context.Context, *Request) (*Response, error)
	BootNotificationConfirmation(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedOCPPMessageServer()
}

// UnimplementedOCPPMessageServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOCPPMessageServer struct{}

func (UnimplementedOCPPMessageServer) HeartbeatRequest(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HeartbeatRequest not implemented")
}
func (UnimplementedOCPPMessageServer) HeartbeatConfirmation(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HeartbeatConfirmation not implemented")
}
func (UnimplementedOCPPMessageServer) BootNotificationRequest(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BootNotificationRequest not implemented")
}
func (UnimplementedOCPPMessageServer) BootNotificationConfirmation(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BootNotificationConfirmation not implemented")
}
func (UnimplementedOCPPMessageServer) mustEmbedUnimplementedOCPPMessageServer() {}
func (UnimplementedOCPPMessageServer) testEmbeddedByValue()                     {}

// UnsafeOCPPMessageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OCPPMessageServer will
// result in compilation errors.
type UnsafeOCPPMessageServer interface {
	mustEmbedUnimplementedOCPPMessageServer()
}

func RegisterOCPPMessageServer(s grpc.ServiceRegistrar, srv OCPPMessageServer) {
	// If the following call pancis, it indicates UnimplementedOCPPMessageServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OCPPMessage_ServiceDesc, srv)
}

func _OCPPMessage_HeartbeatRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OCPPMessageServer).HeartbeatRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OCPPMessage_HeartbeatRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OCPPMessageServer).HeartbeatRequest(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OCPPMessage_HeartbeatConfirmation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OCPPMessageServer).HeartbeatConfirmation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OCPPMessage_HeartbeatConfirmation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OCPPMessageServer).HeartbeatConfirmation(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OCPPMessage_BootNotificationRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OCPPMessageServer).BootNotificationRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OCPPMessage_BootNotificationRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OCPPMessageServer).BootNotificationRequest(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OCPPMessage_BootNotificationConfirmation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OCPPMessageServer).BootNotificationConfirmation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OCPPMessage_BootNotificationConfirmation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OCPPMessageServer).BootNotificationConfirmation(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// OCPPMessage_ServiceDesc is the grpc.ServiceDesc for OCPPMessage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OCPPMessage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "message.v1.OCPPMessage",
	HandlerType: (*OCPPMessageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HeartbeatRequest",
			Handler:    _OCPPMessage_HeartbeatRequest_Handler,
		},
		{
			MethodName: "HeartbeatConfirmation",
			Handler:    _OCPPMessage_HeartbeatConfirmation_Handler,
		},
		{
			MethodName: "BootNotificationRequest",
			Handler:    _OCPPMessage_BootNotificationRequest_Handler,
		},
		{
			MethodName: "BootNotificationConfirmation",
			Handler:    _OCPPMessage_BootNotificationConfirmation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/message/v1/message.proto",
}
