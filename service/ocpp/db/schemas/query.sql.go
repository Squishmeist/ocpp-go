// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package schemas

import (
	"context"
	"database/sql"
	"time"
)

const getMessagesByUuid = `-- name: GetMessagesByUuid :one
SELECT uuid, type, created_at, "action", payload
FROM message
WHERE uuid = ?
`

func (q *Queries) GetMessagesByUuid(ctx context.Context, uuid string) (Message, error) {
	row := q.db.QueryRowContext(ctx, getMessagesByUuid, uuid)
	var i Message
	err := row.Scan(
		&i.Uuid,
		&i.Type,
		&i.CreatedAt,
		&i.Action,
		&i.Payload,
	)
	return i, err
}

const getRequestMessageByUuid = `-- name: GetRequestMessageByUuid :one
SELECT uuid, type, created_at, "action", payload
FROM message
WHERE uuid = ? AND type = 'REQUEST'
`

func (q *Queries) GetRequestMessageByUuid(ctx context.Context, uuid string) (Message, error) {
	row := q.db.QueryRowContext(ctx, getRequestMessageByUuid, uuid)
	var i Message
	err := row.Scan(
		&i.Uuid,
		&i.Type,
		&i.CreatedAt,
		&i.Action,
		&i.Payload,
	)
	return i, err
}

const insertChargePoint = `-- name: InsertChargePoint :one
INSERT INTO chargepoint (
    serial_number,
    model,
    vendor,
    firmware_version,
    iicid,
    imsi,
    meter_serial_number,
    meter_type,
    last_boot,
    last_heartbeat,
    last_connected
) VALUES (?,?,?,?,?,?,?,?,?,?,?)
RETURNING serial_number, model, vendor, firmware_version, iicid, imsi, meter_serial_number, meter_type, last_boot, last_heartbeat, last_connected
`

type InsertChargePointParams struct {
	SerialNumber      string
	Model             string
	Vendor            string
	FirmwareVersion   string
	Iicid             sql.NullString
	Imsi              sql.NullString
	MeterSerialNumber sql.NullString
	MeterType         sql.NullString
	LastBoot          time.Time
	LastHeartbeat     sql.NullTime
	LastConnected     sql.NullTime
}

func (q *Queries) InsertChargePoint(ctx context.Context, arg InsertChargePointParams) (Chargepoint, error) {
	row := q.db.QueryRowContext(ctx, insertChargePoint,
		arg.SerialNumber,
		arg.Model,
		arg.Vendor,
		arg.FirmwareVersion,
		arg.Iicid,
		arg.Imsi,
		arg.MeterSerialNumber,
		arg.MeterType,
		arg.LastBoot,
		arg.LastHeartbeat,
		arg.LastConnected,
	)
	var i Chargepoint
	err := row.Scan(
		&i.SerialNumber,
		&i.Model,
		&i.Vendor,
		&i.FirmwareVersion,
		&i.Iicid,
		&i.Imsi,
		&i.MeterSerialNumber,
		&i.MeterType,
		&i.LastBoot,
		&i.LastHeartbeat,
		&i.LastConnected,
	)
	return i, err
}

const insertMessage = `-- name: InsertMessage :one
INSERT INTO message (
    uuid,
    type,
    action,
    payload
) VALUES (?,?,?,?)
RETURNING uuid, type, created_at, "action", payload
`

type InsertMessageParams struct {
	Uuid    string
	Type    string
	Action  string
	Payload string
}

func (q *Queries) InsertMessage(ctx context.Context, arg InsertMessageParams) (Message, error) {
	row := q.db.QueryRowContext(ctx, insertMessage,
		arg.Uuid,
		arg.Type,
		arg.Action,
		arg.Payload,
	)
	var i Message
	err := row.Scan(
		&i.Uuid,
		&i.Type,
		&i.CreatedAt,
		&i.Action,
		&i.Payload,
	)
	return i, err
}
