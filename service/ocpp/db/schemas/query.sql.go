// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: query.sql

package schemas

import (
	"context"
	"database/sql"
	"time"
)

const insertChargepoint = `-- name: InsertChargepoint :one
INSERT INTO chargepoint (
    serial_number,
    model,
    vendor,
    firmware_version,
    iicid,
    imsi,
    meter_serial_number,
    meter_type,
    last_boot,
    last_heartbeat,
    last_connected
) VALUES (?,?,?,?,?,?,?,?,?,?,?)
RETURNING serial_number, model, vendor, firmware_version, iicid, imsi, meter_serial_number, meter_type, last_boot, last_heartbeat, last_connected
`

type InsertChargepointParams struct {
	SerialNumber      string
	Model             string
	Vendor            string
	FirmwareVersion   string
	Iicid             sql.NullString
	Imsi              sql.NullString
	MeterSerialNumber sql.NullString
	MeterType         sql.NullString
	LastBoot          time.Time
	LastHeartbeat     sql.NullTime
	LastConnected     sql.NullTime
}

func (q *Queries) InsertChargepoint(ctx context.Context, arg InsertChargepointParams) (Chargepoint, error) {
	row := q.db.QueryRowContext(ctx, insertChargepoint,
		arg.SerialNumber,
		arg.Model,
		arg.Vendor,
		arg.FirmwareVersion,
		arg.Iicid,
		arg.Imsi,
		arg.MeterSerialNumber,
		arg.MeterType,
		arg.LastBoot,
		arg.LastHeartbeat,
		arg.LastConnected,
	)
	var i Chargepoint
	err := row.Scan(
		&i.SerialNumber,
		&i.Model,
		&i.Vendor,
		&i.FirmwareVersion,
		&i.Iicid,
		&i.Imsi,
		&i.MeterSerialNumber,
		&i.MeterType,
		&i.LastBoot,
		&i.LastHeartbeat,
		&i.LastConnected,
	)
	return i, err
}

const updateChargepointLastHeartbeat = `-- name: UpdateChargepointLastHeartbeat :one
UPDATE chargepoint 
SET last_heartbeat = ?
WHERE serial_number = ?
RETURNING serial_number
`

type UpdateChargepointLastHeartbeatParams struct {
	LastHeartbeat sql.NullTime
	SerialNumber  string
}

func (q *Queries) UpdateChargepointLastHeartbeat(ctx context.Context, arg UpdateChargepointLastHeartbeatParams) (string, error) {
	row := q.db.QueryRowContext(ctx, updateChargepointLastHeartbeat, arg.LastHeartbeat, arg.SerialNumber)
	var serial_number string
	err := row.Scan(&serial_number)
	return serial_number, err
}
